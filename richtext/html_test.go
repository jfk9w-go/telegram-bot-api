package richtext

import (
	"testing"

	telegram "github.com/jfk9w-go/telegram-bot-api"
	"github.com/stretchr/testify/assert"
)

func Test_PageWriter_SingleLetter(t *testing.T) {
	p := HTML(1, 0, nil, nil)
	p.writeBreakable("hello")
	p.writeBreakable("hello")
	p.writeUnbreakable("hello")
	assert.Equal(t,
		[]string{"h", "e", "l", "l", "o", "h", "e", "l", "l", "o", "B", "R", "O", "K", "E", "N"},
		p.Flush().Text)
}

func Test_PageWriter_OnePage(t *testing.T) {
	p := HTML(10, 1, nil, nil)
	p.writeBreakable("Hello, Mark. How do you do?")
	assert.Equal(t, []string{"Hello,"}, p.Flush().Text)
}

func Test_PageWriter_ManyPages(t *testing.T) {
	p := HTML(10, -1, nil, nil)
	p.writeBreakable("Hello, Mark. How do you do?")
	assert.Equal(t, []string{"Hello,", "Mark. How", "do you do?"}, p.Flush().Text)
}

func Test_PageWriter_Emojis(t *testing.T) {
	p := HTML(3, 0, nil, nil)
	p.writeBreakable("üò≠üëåüéâüòûüòòüòî")
	assert.Equal(t, []string{"üò≠üëåüéâ", "üòûüòòüòî"}, p.Flush().Text)
}

func Test_PageWriter_Unbreakable(t *testing.T) {
	p := HTML(8, 0, nil, nil)
	p.writeUnbreakable("123")
	p.writeUnbreakable("üò≠üëåüéâüòûüòòüòî")
	assert.Equal(t, []string{"123", "üò≠üëåüéâüòûüòòüòî"}, p.Flush().Text)
}

type testLinkPrinter struct{}

func (testLinkPrinter) Print(link *Link) string {
	if href, ok := link.Attr("href"); ok {
		return href
	} else {
		return ""
	}
}

func Test_PageWriter_BasicHTML(t *testing.T) {
	parts := HTML(72, 0, nil, nil).
		Tag("b").
		Text("A Study in Scarlet is an 1887 detective novel by Scottish author Arthur Conan Doyle. ").
		EndTag().
		Link("Wikipedia", "https://en.wikipedia.org/wiki/A_Study_in_Scarlet").
		Flush().Text
	sample := []string{
		`<b>A Study in Scarlet is an 1887 detective novel by Scottish author</b>`,
		`<b>Arthur Conan Doyle. </b>`,
		`<a href="https://en.wikipedia.org/wiki/A_Study_in_Scarlet">Wikipedia</a>`,
	}
	assert.Equal(t, parts, sample)

	parts = HTML(0, 0, nil, nil).
		Parse(`<strong>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</strong><br><em>–ù–µ –Ω–∞—à–µ–ª - —Å–æ–∑–¥–∞–ª</em><br>–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏, –∏—â–µ–º –º—É–∑—ã–∫—É, —Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.<br>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: <a href="https:&#47;&#47;pastebin.com&#47;i32h11vd" target="_blank" rel="nofollow noopener noreferrer">https:&#47;&#47;pastebin.com&#47;i32h11vd</a>`).
		Flush().Text
	sample = []string{
		`<b>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</b>
<i>–ù–µ –Ω–∞—à–µ–ª - —Å–æ–∑–¥–∞–ª</i>
–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏, –∏—â–µ–º –º—É–∑—ã–∫—É, —Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: <a href="https://pastebin.com/i32h11vd">https://pastebin.com/i32h11vd</a>`,
	}
	assert.Equal(t, parts, sample)

	parts = HTML(75, 0, nil, nil).
		Parse(`<strong>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</strong><br><em>–ù–µ –Ω–∞—à–µ–ª - —Å–æ–∑–¥–∞–ª</em><br>–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏, –∏—â–µ–º –º—É–∑—ã–∫—É, —Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.<br>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: <a href="https:&#47;&#47;pastebin.com&#47;i32h11vd" target="_blank" rel="nofollow noopener noreferrer">https:&#47;&#47;pastebin.com&#47;i32h11vd</a>`).
		Flush().Text
	sample = []string{
		`<b>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</b>
<i>–ù–µ –Ω–∞—à–µ–ª - —Å–æ–∑–¥–∞–ª</i>
–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏,`,
		`–∏—â–µ–º –º—É–∑—ã–∫—É, —Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.`,
		`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: `,
		`<a href="https://pastebin.com/i32h11vd">https://pastebin.com/i32h11vd</a>`,
	}
	assert.Equal(t, parts, sample)
}

func Test_PageWriter_LinkPrinter(t *testing.T) {
	pages := HTML(50, 0, nil, testLinkPrinter{}).
		Parse(`<strong>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</strong><br><em>–ù–µ –Ω–∞—à–µ–ª - —Å–æ–∑–¥–∞–ª</em><br>–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏, –∏—â–µ–º –º—É–∑—ã–∫—É, —Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.<br>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: <a href="https:&#47;&#47;pastebin.com&#47;i32h11vd" target="_blank" rel="nofollow noopener noreferrer">https:&#47;&#47;pastebin.com&#47;i32h11vd</a>`).
		Flush().Text
	sample := []string{
		`<b>–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π webm mp4 —Ç—Ä–µ–¥</b>
<i>–ù–µ –Ω–∞—à–µ–ª -</i>`,
		`<i>—Å–æ–∑–¥–∞–ª</i>
–î–µ–ª–∏–º—Å—è –≤–∫—É—Å–∞–º–∏, –∏—â–µ–º –º—É–∑—ã–∫—É,`,
		`—Å–æ–∑–¥–∞–µ–º, –Ω–∞—Ä–µ–∑–∞–µ–º, –ø–æ—Å—Ç–∏–º —Å–≤–æ–∏ –ª–∏–±–æ —á—É–∂–∏–µ`,
		`–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è`,
		`—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—É—Å–æ–≤: `,
		`https://pastebin.com/i32h11vd`,
	}
	assert.Equal(t, pages, sample)
}

func Test_PageWriter_LinkInTag(t *testing.T) {
	pages := HTML(telegram.MaxMessageSize, 0, nil, nil).
		Parse(
			`<i>&gt;–ü–æ—á–µ–º—É —Ç–æ–≤–∞—Ä–∏—â –ú–∞–π–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç —Å —Ä–∞–±–æ—á–∏–º–∏ –¥–æ–º–∞–º–∏, –≤–µ–¥—å —Å–ª–µ–¥—è—Ç –æ–Ω–∏ —É–∂–∞—Å–Ω–æ, –≤ —Ç–æ–º –∂–µ –≤–∫–æ–Ω—Ç–∞–∫—Ç–∏–∫–µ <a href="https://vk.com/pedestrian111,">https://vk.com/pedestrian111,</a> –¥–∞ –∏ —Å–∏–º–ø–∞—Ç–∏—é –ø–∏—Ç–∞—Ç—å –∫ —Ç–∞–∫–∏–º —Å–ª–æ–∂–Ω–æ? –ó–∞–Ω–æ—Å—è—Ç? –ù–∏–∫—Ç–æ –Ω–µ –∂–∞–ª—É–µ—Ç—Å—è, –∞ –ø–ª–∞–Ω –ª–µ–≥—á–µ –Ω–∞ –Ω–∞—Ä–∫–æ—à–∞—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å?
    –î–µ–ª–∞–µ—Ç, –Ω–æ –æ –ø–æ–¥–≤–∏–≥–∞—Ö –≤—Å–µ –º–æ–ª—á–∞—Ç —Å 2011 –≥–æ–¥–∞? –Ø —á–µ–≥–æ-—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ —ç—Ç–æ –≤—Å–µ –Ω–æ—Ä–º–∞? </i>`).
		Flush().Text
	sample := []string{
		`<i>&gt;–ü–æ—á–µ–º—É —Ç–æ–≤–∞—Ä–∏—â –ú–∞–π–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç —Å —Ä–∞–±–æ—á–∏–º–∏ –¥–æ–º–∞–º–∏, –≤–µ–¥—å —Å–ª–µ–¥—è—Ç –æ–Ω–∏ —É–∂–∞—Å–Ω–æ, –≤ —Ç–æ–º –∂–µ –≤–∫–æ–Ω—Ç–∞–∫—Ç–∏–∫–µ </i><a href="https://vk.com/pedestrian111,">https://vk.com/pedestrian111,</a><i> –¥–∞ –∏ —Å–∏–º–ø–∞—Ç–∏—é –ø–∏—Ç–∞—Ç—å –∫ —Ç–∞–∫–∏–º —Å–ª–æ–∂–Ω–æ? –ó–∞–Ω–æ—Å—è—Ç? –ù–∏–∫—Ç–æ –Ω–µ –∂–∞–ª—É–µ—Ç—Å—è, –∞ –ø–ª–∞–Ω –ª–µ–≥—á–µ –Ω–∞ –Ω–∞—Ä–∫–æ—à–∞—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å?
    –î–µ–ª–∞–µ—Ç, –Ω–æ –æ –ø–æ–¥–≤–∏–≥–∞—Ö –≤—Å–µ –º–æ–ª—á–∞—Ç —Å 2011 –≥–æ–¥–∞? –Ø —á–µ–≥–æ-—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ —ç—Ç–æ –≤—Å–µ –Ω–æ—Ä–º–∞? </i>`,
	}
	assert.Equal(t, pages, sample)
}
